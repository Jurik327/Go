package vulndb

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestVersionMatching(t *testing.T) {
	testcases := []struct {
		TemplateVer string // Template: such as version from CPE string.
		Version     string // Version: actual version string.
		Expected    bool
	}{
		{TemplateVer: "1.0", Version: "1", Expected: true},
		{TemplateVer: "1", Version: "2.0", Expected: false},
		{TemplateVer: "2.0", Version: "1", Expected: false},
		{TemplateVer: "1", Version: "1.0", Expected: true},
		{TemplateVer: "1.0", Version: "1.0.1", Expected: false},
		// MobaXterm.
		{TemplateVer: "10.4", Version: "10.4.0.0", Expected: true},
		{TemplateVer: "10.4", Version: "10.5.0.0", Expected: false},
		// Adobe.
		{TemplateVer: "11.0", Version: "11.0.23", Expected: false},
		{TemplateVer: "11.0.0", Version: "11.0.23", Expected: false},
		{TemplateVer: "11.0.1", Version: "11.0.23", Expected: false},
		{TemplateVer: "11.0.2", Version: "11.0.23", Expected: false},
		{TemplateVer: "11.0.20", Version: "11.0.23", Expected: false},
		{TemplateVer: "11.0.22", Version: "11.0.23", Expected: false},
		{TemplateVer: "11.0.23", Version: "11.0.23", Expected: true},
		{TemplateVer: "11.0.23", Version: "11.0.23.0", Expected: true},
		// golang
		{TemplateVer: "1.1", Version: "1.10.3", Expected: false},
		{TemplateVer: "1.10", Version: "1.10.3", Expected: false},
		{TemplateVer: "1.10.0", Version: "1.10.3", Expected: false},
		{TemplateVer: "1.10.3.1", Version: "1.10.3", Expected: false},
		// WinSCP.
		{TemplateVer: "5", Version: "5.11.1", Expected: false},
		{TemplateVer: "5.1", Version: "5.11.1", Expected: false},
		{TemplateVer: "5.1.1", Version: "5.11.1", Expected: false},
		{TemplateVer: "5.5", Version: "5.11.1", Expected: false},
		//.NET Core.
		{TemplateVer: "1.0", Version: "1.1.0", Expected: false},
		{TemplateVer: "1.1", Version: "1.1.0", Expected: true},
		{TemplateVer: "2.0", Version: "1.1.0", Expected: false},
		//.NET Framework
		{TemplateVer: "4.0", Version: "4.5.51641", Expected: false},
		{TemplateVer: "4.5", Version: "4.5.51641", Expected: false},
		{TemplateVer: "4.5.1", Version: "4.5.51641", Expected: false},
		{TemplateVer: "4.5.2", Version: "4.5.51641", Expected: false},
		{TemplateVer: "4.6", Version: "4.5.51641", Expected: false},
		// node/node.js
		{TemplateVer: "6.1.0", Version: "6.11.4", Expected: false},
		{TemplateVer: "6.10.0", Version: "6.11.4", Expected: false},
		{TemplateVer: "6.11.0", Version: "6.11.4", Expected: false},
		{TemplateVer: "6.11.2", Version: "6.11.4", Expected: false},
		{TemplateVer: "6.11.4", Version: "6.11.4", Expected: true},
		{TemplateVer: "6.12.0", Version: "6.11.4", Expected: false},
		// GIMP.
		{TemplateVer: "2.0", Version: "2.8.22", Expected: false},
		{TemplateVer: "2.8", Version: "2.8.22", Expected: false},
		{TemplateVer: "2.8.16", Version: "2.8.22", Expected: false},
		{TemplateVer: "2.8.22", Version: "2.8.22", Expected: true},
		//VMware.
		{TemplateVer: "12", Version: "12.5.9", Expected: false},
		{TemplateVer: "12.5", Version: "12.5.9", Expected: false},
		{TemplateVer: "12.5.9", Version: "12.5.9", Expected: true},
		{TemplateVer: "12.5.9.0", Version: "12.5.9", Expected: true},
		{TemplateVer: "12.5.9.1", Version: "12.5.9", Expected: false},
	}

	for _, tcase := range testcases {
		cmpVal := VersionCompare(tcase.TemplateVer, tcase.Version)
		if (tcase.Expected && cmpVal != 0) || (!tcase.Expected && cmpVal == 0) {
			t.Fatalf("Version match with template='%s', version='%s' did not yield %v", tcase.TemplateVer, tcase.Version, tcase.Expected)
		}
	}
}

func TestVersionCompare(t *testing.T) {
	testcases := []struct {
		TemplateVer string // Template: such as version from CPE string.
		Version     string // Version: actual version string.
		Expected    int
	}{
		{TemplateVer: "1.0", Version: "1", Expected: 0},
		{TemplateVer: "1", Version: "2.0", Expected: 1},
		{TemplateVer: "2.0", Version: "1", Expected: -1},
		{TemplateVer: "1", Version: "1.0", Expected: 0},
		{TemplateVer: "1.0", Version: "1.0.1", Expected: 1},
		// MobaXterm.
		{TemplateVer: "10.4", Version: "10.4.0.0", Expected: 0},
		{TemplateVer: "10.4", Version: "10.5.0.0", Expected: 1},
		// Adobe.
		{TemplateVer: "11.0", Version: "11.0.23", Expected: 1},
		{TemplateVer: "11.0.0", Version: "11.0.23", Expected: 1},
		{TemplateVer: "11.0.1", Version: "11.0.23", Expected: 1},
		{TemplateVer: "11.0.2", Version: "11.0.23", Expected: 1},
		{TemplateVer: "11.0.20", Version: "11.0.23", Expected: 1},
		{TemplateVer: "11.0.22", Version: "11.0.23", Expected: 1},
		{TemplateVer: "11.0.23", Version: "11.0.23", Expected: 0},
		{TemplateVer: "11.0.23", Version: "11.0.23.0", Expected: 0},
		// golang
		{TemplateVer: "1.1", Version: "1.10.3", Expected: 1},
		{TemplateVer: "1.10", Version: "1.10.3", Expected: 1},
		{TemplateVer: "1.10.0", Version: "1.10.3", Expected: 1},
		{TemplateVer: "1.10.3.1", Version: "1.10.3", Expected: -1},
		// WinSCP.
		{TemplateVer: "5", Version: "5.11.1", Expected: 1},
		{TemplateVer: "5.1", Version: "5.11.1", Expected: 1},
		{TemplateVer: "5.1.1", Version: "5.11.1", Expected: 1},
		{TemplateVer: "5.5", Version: "5.11.1", Expected: 1},
		//.NET Core.
		{TemplateVer: "1.0", Version: "1.1.0", Expected: 1},
		{TemplateVer: "1.1", Version: "1.1.0", Expected: 0},
		{TemplateVer: "2.0", Version: "1.1.0", Expected: -1},
		// .NET Framework
		{TemplateVer: "4.0", Version: "4.5.51641", Expected: 1},
		{TemplateVer: "4.5", Version: "4.5.51641", Expected: 1},
		{TemplateVer: "4.5.1", Version: "4.5.51641", Expected: 1},
		{TemplateVer: "4.5.2", Version: "4.5.51641", Expected: 1},
		{TemplateVer: "4.6", Version: "4.5.51641", Expected: -1},
		// node/node.js
		{TemplateVer: "6.1.0", Version: "6.11.4", Expected: 1},
		{TemplateVer: "6.10.0", Version: "6.11.4", Expected: 1},
		{TemplateVer: "6.11.0", Version: "6.11.4", Expected: 1},
		{TemplateVer: "6.11.2", Version: "6.11.4", Expected: 1},
		{TemplateVer: "6.11.4", Version: "6.11.4", Expected: 0},
		{TemplateVer: "6.12.0", Version: "6.11.4", Expected: -1},
		// GIMP.
		{TemplateVer: "2.0", Version: "2.8.22", Expected: 1},
		{TemplateVer: "2.8", Version: "2.8.22", Expected: 1},
		{TemplateVer: "2.8.16", Version: "2.8.22", Expected: 1},
		{TemplateVer: "2.8.22", Version: "2.8.22", Expected: 0},
		// VMware.
		{TemplateVer: "12", Version: "12.5.9", Expected: 1},
		{TemplateVer: "12.5", Version: "12.5.9", Expected: 1},
		{TemplateVer: "12.5.9", Version: "12.5.9", Expected: 0},
		{TemplateVer: "12.5.9.0", Version: "12.5.9", Expected: 0},
		{TemplateVer: "12.5.9.1", Version: "12.5.9", Expected: -1},
		// Misc.
		{TemplateVer: "09", Version: "3", Expected: -1},
		{TemplateVer: "059.1a.17", Version: "059.1a.18", Expected: 1},
		{TemplateVer: "059.1a.17", Version: "059.1b.17", Expected: 1},
		{TemplateVer: "05.33.009.5.231", Version: "05.33.009.5.231", Expected: 0},
		{TemplateVer: "05.33.009.5.231", Version: "05.33.009.5.232", Expected: 1},
		{TemplateVer: "05.33.010.5.331", Version: "05.33.009.5.232", Expected: -1},
		{TemplateVer: "1.10.x000.0002", Version: "1.10.x001.0002", Expected: 1},
		{TemplateVer: "10-h81", Version: "10-h82", Expected: 1},
		{TemplateVer: "reva_firmware_patch_1.08b04", Version: "reva_firmware_patch_1.08b05", Expected: 1},
		{TemplateVer: "reva_firmware_patch_1.08b04", Version: "reva_firmware_patch_2.08b05", Expected: 1},
		{TemplateVer: "reva_firmware_patch_1.08b04", Version: "reva_firmware_patch_1.10b04", Expected: 1},
		{TemplateVer: "esxi670-201806401-bg", Version: "esxi650-201806401-bg", Expected: -1},
		{TemplateVer: "esxi650-201806401-bg", Version: "esxi650-201906401-bg", Expected: 1},
		// juniper/junos
		{TemplateVer: "12.1x46", Version: "12.3", Expected: 1},
		{TemplateVer: "12.1x46", Version: "12.3x48", Expected: 1},
		{TemplateVer: "14.1", Version: "14.1x53", Expected: 1},
		{TemplateVer: "14.2", Version: "14.1x53", Expected: -1},
		{TemplateVer: "15.1x49", Version: "15.1x53", Expected: 1},
		{TemplateVer: "15.1x49", Version: "17.2x75", Expected: 1},
		{TemplateVer: "17.2", Version: "17.2x75", Expected: 1},
		{TemplateVer: "17.1", Version: "17.2x75", Expected: 1},
		// Cisco.
		{TemplateVer: "21.3.0.67664", Version: "21.3.0.67660", Expected: -1},
		{TemplateVer: "21.3.0.67664", Version: "21.3.1.67660", Expected: 1},
		{TemplateVer: "21.3.0.67664", Version: "21.3.0.67664.0", Expected: 0},
		// Cisco IOS.
		{TemplateVer: "15.4(3)m6", Version: "15.4(3)m6a", Expected: 1},
		{TemplateVer: "15.4(1)s", Version: "15.4(1)s1", Expected: 1},
		{TemplateVer: "15.3(3)s0", Version: "15.3(3)s1", Expected: 1},
		{TemplateVer: "15.3(3)s0", Version: "12.3(33)XNA", Expected: -1},
		{TemplateVer: "15.6(3)M6", Version: "15.6(2)T3", Expected: -1},
		// Basic semantic versioning (not fully supported as things like -beta, rc
		// are not used in practice in NVD feeds).
		{TemplateVer: "1.4.5", Version: "1.2.3", Expected: -1},
		{TemplateVer: "1.2-beta", Version: "1.2-beta", Expected: 0},
		{TemplateVer: "1.2-beta", Version: "1.2-beta", Expected: 0},
		{TemplateVer: "1.4.5", Version: "1.2.3", Expected: -1},
		{TemplateVer: "1.1.4", Version: "1.2", Expected: 1},
		{TemplateVer: "1.2+beta", Version: "1.2+foo", Expected: 0},
		{TemplateVer: "v1.2+beta", Version: "v1.2+foo", Expected: 0},
		{TemplateVer: "v1.2.3.4", Version: "v1.2.3.4", Expected: 0},
		{TemplateVer: "v1.2", Version: "v1.2.0.0", Expected: 0},
		{TemplateVer: "v1.2", Version: "v1.2.0.0.1", Expected: 1},
		{TemplateVer: "v1.2.0.0", Version: "v1.2", Expected: 0},
		{TemplateVer: "v1.2.0.0.1", Version: "v1.2", Expected: -1},
		{TemplateVer: "v1.2.0.0.1", Version: "v1.2.0.0", Expected: -1},
		{TemplateVer: "v1.2.3.4", Version: "v1.2.3.0", Expected: -1},
		//Autodesk design review.
		{TemplateVer: "2012", Version: "12.0", Expected: 2},
		{TemplateVer: "2012.2", Version: "2012.0", Expected: -1},
	}

	for _, tcase := range testcases {
		cmpVal := VersionCompare(tcase.TemplateVer, tcase.Version)
		if cmpVal != tcase.Expected {
			t.Fatalf("Version compare with template='%s', version='%s' did not yield %v (got %d)", tcase.TemplateVer, tcase.Version, tcase.Expected, cmpVal)
		}

		// Try switching the order.
		reverseVal := VersionCompare(tcase.Version, tcase.TemplateVer)
		if reverseVal != -cmpVal && reverseVal != 2 {
			t.Fatalf("Reverse version compare with template='%s', version='%s' did not yield %v (got %d)", tcase.TemplateVer, tcase.Version, -cmpVal, reverseVal)
		}
	}
}

func TestPatchCompare(t *testing.T) {
	testcases := []struct {
		TemplatePatch string
		Patch         string
		Expected      int
	}{
		{"", "5", 1},
		{"10", "5", -1},
	}

	for _, tcase := range testcases {
		t.Logf("TCase: %+v", tcase)
		cmpVal := PatchCompare(tcase.TemplatePatch, tcase.Patch)
		require.Equal(t, tcase.Expected, cmpVal)
	}
}

/*
Junos versioning format: [12.1][X44]-[D10]
	12.1 - Junos version
	X44  - The X-release number
	D10  - The maintenance release number
	12.1X44 <- major release number (major,minor,type,build).
*/
func TestParseJunosVersions(t *testing.T) {
	tcases := []struct {
		Raw         string
		ShouldMatch bool
		Expected    junosVersion
	}{
		{"12.2R6.1", true, junosVersion{Major: "12", Minor: "2", Type: "R", Build: "6", Spin: "1"}},
		{"12.1X44-D10.4", true, junosVersion{Major: "12", Minor: "1", Type: "X", Build: "44", MaintenanceRelease: "D10", Spin: "4"}},
		{"12.1X44", true, junosVersion{Major: "12", Minor: "1", Type: "X", Build: "44"}},
		{"14.2R3-S4.5", true, junosVersion{Major: "14", Minor: "2", Type: "R", Build: "3", MaintenanceRelease: "S4", Spin: "5"}},
		{"10.4S4.2", true, junosVersion{Major: "10", Minor: "4", Type: "S", Build: "4", Spin: "2"}},
		{"5", false, junosVersion{}},
	}

	for _, tcase := range tcases {
		t.Logf("%s", tcase.Raw)
		ver, match := ParseJunosVersion(tcase.Raw)
		require.Equal(t, tcase.ShouldMatch, match)
		require.Equal(t, tcase.Expected, ver)
	}
}

func TestVersionCompareJunosWithName(t *testing.T) {
	t.Logf("Test Junos versions with names")

	testcases := []struct {
		TemplateVer   string
		TemplatePatch string
		Version       string
		Patch         string
		Expected      int
	}{
		{"15.1X49", "D160", "15.1X49", "D160.2", 1},
		{"15.1X49", "D10", "15.1X49", "D160", 1},
		{"15.1X49", "D20", "15.1X49", "D160", 1},
		{"15.1X49", "D160", "15.1X49", "D20", -1},
		{"15.1X49", "D20", "15.1X49", "D20", 0},
		{"15.1X48", "D160", "15.1X49", "D20", 2},
		{"15.1x53", "d34", "15.1X49", "D20", 2}, // Incompatible (vulnerability).
	}

	for _, tcase := range testcases {
		t.Logf("Tcase: %+v", tcase)
		cmpVal := VersionCompareProduct("juniper", "junos", tcase.TemplateVer, tcase.Version, tcase.TemplatePatch, tcase.Patch)
		require.Equal(t, tcase.Expected, cmpVal)
	}
}

func TestVersionCompareIOSWithName(t *testing.T) {
	t.Logf("Test IOS versions with names")

	testcases := []struct {
		TemplateVer string
		Version     string
		Expected    int
	}{
		{"16.3.4", "denali-16.3.4", 0},
		{"16.3.5", "denali-16.3.4", -1},
		{"16.3.2", "denali-16.3.4", 1},
		{"denali-16.3.4", "denali-16.3.3", -1},
		{"denali-16.3.4", "denali-16.3.4", 0},
		{"denali-16.3.4", "bungalo-16.3.4", 2},
	}

	for _, tcase := range testcases {
		cmpVal := VersionCompareProduct("cisco", "ios", tcase.TemplateVer, tcase.Version, "", "")
		require.Equal(t, tcase.Expected, cmpVal)
	}
}

func TestVersionCompareIOSVersionList(t *testing.T) {
	t.Logf("Test IOS versions from list")
	count := 0
	for i := range iosVersions {
		for j := i + 1; j < len(iosVersions); j++ {
			cmpVal := VersionCompareProduct("cisco", "ios", iosVersions[i], iosVersions[j], "", "")

			if cmpVal == 2 {
				continue // Skip incompatible versions.
			}
			t.Logf("%s vs %s -> %d", iosVersions[i], iosVersions[j], cmpVal)

			var expected int
			if j > i {
				expected = -1
			} else if j < i {
				expected = 1
			} else {
				expected = 0
			}
			if cmpVal != expected {
				t.Fatalf("IOS Version compare with template='%s', version='%s' did not yield %v (got %d)", iosVersions[i], iosVersions[j], expected, cmpVal)
			}
			count++
		}
	}
	if count != 18690 {
		// Change detection.
		t.Fatalf("count != 18690 (got %d)", count)
	}
}

func TestVersionCompareASA(t *testing.T) {
	t.Logf("Test ASA versions")
	asaVersions := []struct {
		NVDTemplate string
		Version     string
		Expected    int
	}{
		{NVDTemplate: "9.1.7.23", Version: "9.1(7)", Expected: -1},
		{NVDTemplate: "9.1.7.23", Version: "9.1(7.23)", Expected: 0},
		{NVDTemplate: "9.1.7.22", Version: "9.1(7.23)", Expected: 1},
		{NVDTemplate: "9.1.7", Version: "9.1(7.23)", Expected: 1},
		{NVDTemplate: "9.1", Version: "9.1(7.23)", Expected: 1},
		{NVDTemplate: "9", Version: "9.1(7.23)", Expected: 1},
	}

	for _, ver := range asaVersions {
		cmpVal := VersionCompareProduct("cisco", "adaptive_security_appliance_software", ver.NVDTemplate, ver.Version, "", "")

		if cmpVal != ver.Expected {
			t.Fatalf("IOS Version compare with template='%s', version='%s' did not yield %v (got %d)", ver.NVDTemplate, ver.Version, ver.Expected, cmpVal)
		}
	}
}

// Partial list of Cisco IOS versions in ascending order.
// Whole list can be obtained from https://tools.cisco.com/security/center/getIOSVersions
// Some entries commented out as does not always make sense. Simply a best effort to get
// the majority of those correct.
var iosVersions = []string{
	"15.8(3)M1",
	"15.8(3)M0b",
	"15.8(3)M0a",
	"15.8(3)M",
	"15.7(3)M4",
	"15.7(3)M2",
	"15.7(3)M1",
	"15.7(3)M0a",
	"15.7(3)M",
	"15.6(2)T3",
	"15.6(2)T2",
	"15.6(2)T1",
	"15.6(2)T",
	"15.6(1)T3",
	"15.6(1)T2",
	"15.6(1)T1",
	"15.6(1)T0a",
	"15.6(1)T",
	"15.6(2)SP6",
	"15.6(2)SP5",
	"15.6(2)SP4",
	"15.6(2)SP3b",
	"15.6(2)SP3",
	"15.6(2)SP2",
	"15.6(2)SP1",
	"15.6(2)SP",
	"15.6(2)SN",
	"15.6(2)S4",
	"15.6(2)S3",
	"15.6(2)S2",
	"15.6(2)S1",
	"15.6(2)S0a",
	"15.6(2)S",
	"15.6(1)S4",
	"15.6(1)S3",
	"15.6(1)S2",
	"15.6(1)S1",
	"15.6(1)S",
	"15.6(3)M6",
	"15.6(3)M5",
	"15.6(3)M4",
	"15.6(3)M3a",
	"15.6(3)M3",
	"15.6(3)M2a",
	"15.6(3)M2",
	"15.6(3)M1b",
	"15.6(3)M1",
	"15.6(3)M0a",
	"15.6(3)M",
	"15.5(2)T4",
	"15.5(2)T3",
	"15.5(2)T2",
	"15.5(2)T1",
	"15.5(2)T",
	"15.5(1)T4",
	"15.5(1)T3",
	"15.5(1)T2",
	"15.5(1)T1",
	"15.5(1)T",
	"15.5(1)SY3",
	"15.5(1)SY2",
	"15.5(1)SY1",
	"15.5(1)SY",
	"15.5(3)SN",
	"15.5(3)S9",
	"15.5(3)S8",
	"15.5(3)S7b",
	"15.5(3)S7",
	"15.5(3)S6b",
	"15.5(3)S6a",
	"15.5(3)S6",
	"15.5(3)S5",
	"15.5(3)S4",
	"15.5(3)S3",
	"15.5(3)S2",
	"15.5(3)S1a",
	"15.5(3)S1",
	"15.5(3)S0a",
	"15.5(3)S",
	"15.5(2)S4",
	"15.5(2)S3",
	"15.5(2)S2",
	"15.5(2)S1",
	"15.5(2)S",
	"15.5(1)S4",
	"15.5(1)S3",
	"15.5(1)S2",
	"15.5(1)S1",
	"15.5(1)S",
	"15.5(3)M9",
	"15.5(3)M8",
	"15.5(3)M7",
	"15.5(3)M6a",
	"15.5(3)M6",
	"15.5(3)M5",
	"15.5(3)M4a",
	"15.5(3)M4",
	"15.5(3)M3",
	"15.5(3)M2",
	"15.5(3)M1",
	"15.5(3)M0a",
	"15.5(3)M",
	"15.4(2)T4",
	"15.4(2)T3",
	"15.4(2)T2",
	"15.4(2)T1",
	"15.4(2)T",
	"15.4(1)T4",
	"15.4(1)T3",
	"15.4(1)T2",
	"15.4(1)T1",
	"15.4(1)T",
	"15.4(1)SY4",
	"15.4(1)SY3",
	"15.4(1)SY2",
	"15.4(1)SY1",
	"15.4(1)SY",
	"15.4(3)S10",
	"15.4(3)S9",
	"15.4(3)S8",
	"15.4(3)S7",
	"15.4(3)S6a",
	"15.4(3)S6",
	"15.4(3)S5",
	"15.4(3)S4",
	"15.4(3)S3",
	"15.4(3)S2",
	"15.4(3)S1",
	"15.4(3)S",
	"15.4(2)S4",
	"15.4(2)S3",
	"15.4(2)S2",
	"15.4(2)S1",
	"15.4(2)S",
	"15.4(1)S4",
	"15.4(1)S3",
	"15.4(1)S2",
	"15.4(1)S1",
	"15.4(1)S",
	"15.4(3)M10",
	"15.4(3)M9",
	"15.4(3)M8",
	"15.4(3)M7",
	"15.4(3)M6a",
	"15.4(3)M6",
	"15.4(3)M5",
	"15.4(3)M4",
	"15.4(3)M3",
	"15.4(3)M2",
	"15.4(3)M1",
	"15.4(3)M",
	"15.4(2)CG",
	"15.4(1)CG1",
	"15.4(1)CG",
	"12.4(24)YG4",
	"12.4(24)YG3",
	"12.4(24)YG2",
	"12.4(24)YG1",
	"12.4(24)YG",
	"12.4(15)XZ2",
	"12.4(15)XZ1",
	"12.4(15)XZ",
	"12.4(115)XY",
	"12.4(15)XY5",
	"12.4(15)XY4",
	"12.4(15)XY3",
	"12.4(15)XY2",
	"12.4(15)XY1",
	"12.4(15)XY",
	"12.4(115)XW",
	"12.4(11)XW10",
	"12.4(11)XW9",
	"12.4(11)XW8",
	"12.4(11)XW7",
	"12.4(11)XW6",
	"12.4(11)XW5",
	"12.4(11)XW4",
	"12.4(11)XW3",
	"12.4(11)XW2",
	"12.4(11)XW1",
	"12.4(11)XW",
	"12.4(11)XV2",
	"12.4(11)XV1",
	"12.4(11)XV",
	"12.4(106)XT5a",
	"12.4(6)XT2",
	"12.4(6)XT1",
	"12.4(6)XT",
	"12.4(115)XR",
	"12.4(22)XR12",
	"12.4(22)XR11",
	"12.4(22)XR10",
	"12.4(22)XR9",
	"12.4(22)XR8",
	"12.4(22)XR7",
	"12.4(22)XR6",
	"12.4(22)XR5",
	"12.4(22)XR4",
	"12.4(22)XR3",
	"12.4(22)XR2",
	"12.4(22)XR1",
	"12.4(15)XR10",
	"12.4(15)XR9",
	"12.4(15)XR8",
	"12.4(15)XR7",
	"12.4(15)XR6",
	"12.4(15)XR5",
	"12.4(15)XR4",
	"12.4(15)XR3",
	"12.4(15)XR2",
	"12.4(15)XR1",
	"12.4(15)XR",
	"12.4(15)XQ8",
	"12.4(15)XQ7",
	"12.4(15)XQ6",
	"12.4(15)XQ5",
	"12.4(15)XQ4",
	"12.4(15)XQ3",
	"12.4(15)XQ2b",
	"12.4(15)XQ2a",
	"12.4(15)XQ2",
	"12.4(15)XQ1",
	"12.4(15)XQ",
	"12.4(6)XP",
	"12.4(4)XP",
	"12.4(115)XN",
	"12.4(15)XN",
	"12.4(15)XM3",
	"12.4(15)XM2",
	"12.4(15)XM1",
	"12.4(15)XM",
	"12.4(15)XL6",
	"12.4(15)XL5",
	"12.4(15)XL4",
	"12.4(15)XL3",
	"12.4(15)XL2",
	"12.4(15)XL1",
	"12.4(15)XL",
	"12.4(14)XK",
	"12.4(11)XJ4",
	"12.4(11)XJ3",
	"12.4(11)XJ2",
	"12.4(11)XJ",
	"12.4(9)XG5",
	"12.4(9)XG4",
	"12.4(9)XG3",
	"12.4(9)XG2",
	"12.4(9)XG1",
	"12.4(9)XG",
	"12.4(15)XF",
	"12.4(11)XF",
	"12.4(9)XF",
	"12.4(6)XE5",
	"12.4(6)XE2",
	"12.4(6)XE1",
	"12.4(6)XE",
	"12.4(104)XD",
	"12.4(4)XD12",
	"12.4(4)XD11",
	"12.4(4)XD10",
	"12.4(4)XD9",
	"12.4(4)XD8",
	"12.4(4)XD7",
	"12.4(4)XD5",
	"12.4(4)XD4",
	"12.4(4)XD2",
	"12.4(4)XD1",
	"12.4(4)XD",
	"12.4(4)XC7",
	"12.4(4)XC6",
	"12.4(4)XC5",
	"12.4(4)XC4",
	"12.4(4)XC3",
	"12.4(4)XC2",
	"12.4(4)XC1",
	"12.4(4)XC",
	"12.4(2)XB12",
	"12.4(2)XB11",
	"12.4(2)XB10",
	"12.4(2)XB9",
	"12.4(2)XB8",
	"12.4(2)XB7",
	"12.4(2)XB6",
	"12.4(2)XB5",
	"12.4(2)XB4",
	"12.4(2)XB3",
	"12.4(2)XB2",
	"12.4(2)XB1",
	"12.4(2)XB",
	"12.4(2)XA2",
	"12.4(2)XA1",
	"12.4(2)XA",
	"12.4(120)T",
	"12.4(106)T",
	"12.4(24)T8",
	"12.4(24)T7",
	"12.4(24)T6",
	"12.4(24)T5",
	"12.4(24)T4l",
	"12.4(24)T4f",
	"12.4(24)T4e",
	"12.4(24)T4d",
	"12.4(24)T4c",
	"12.4(24)T4b",
	"12.4(24)T4a",
	"12.4(24)T4",
	"12.4(24)T3f",
	"12.4(24)T3e",
	"12.4(24)T3",
	"12.4(24)T2",
	"12.4(24)T1",
	"12.4(24)T",
	"12.4(22)T6",
	"12.4(22)T5",
	"12.4(22)T4",
	"12.4(22)T3",
	"12.4(22)T2",
	"12.4(22)T1",
	"12.4(22)T",
	"12.4(20)T6a",
	"12.4(20)T6",
	"12.4(20)T5",
	"12.4(20)T4",
	"12.4(20)T3",
	"12.4(20)T2",
	"12.4(20)T1",
	"12.4(20)T",
	"12.4(15)T17",
	"12.4(15)T16",
	"12.4(15)T15",
	"12.4(15)T14",
	"12.4(15)T13",
	"12.4(15)T12",
	"12.4(15)T11",
	"12.4(15)T10",
	"12.4(15)T9",
	"12.4(15)T8",
	"12.4(15)T7",
	"12.4(15)T6",
	"12.4(15)T5",
	"12.4(15)T4",
	"12.4(15)T3",
	"12.4(15)T2",
	"12.4(15)T1",
	"12.4(15)T",
	"12.4(13r)T11",
	"12.4(13r)T",
	"12.4(11)T4",
	"12.4(11)T3",
	"12.4(11)T2",
	"12.4(11)T1",
	"12.4(11)T",
	"12.4(9)T7",
	"12.4(9)T6",
	"12.4(9)T5",
	"12.4(9)T4",
	"12.4(9)T3",
	"12.4(9)T2",
	"12.4(9)T1",
	"12.4(9)T",
	"12.4(6)T11",
	"12.4(6)T10",
	"12.4(6)T9",
	"12.4(6)T8",
	"12.4(6)T7",
	"12.4(6)T6",
	"12.4(6)T5",
	"12.4(6)T4",
	"12.4(6)T3",
	"12.4(6)T2",
	"12.4(6)T1",
	"12.4(6)T",
	"12.4(4)T6",
	"12.4(4)T5",
	"12.4(4)T4",
	"12.4(4)T3",
	"12.4(4)T2",
	"12.4(4)T1",
	"12.4(4)T",
	"12.4(2)T5",
	"12.4(2)T4",
	"12.4(2)T3",
	"12.4(2)T2",
	"12.4(2)T1",
	"12.4(2)T",
	"12.4(115)SW1",
	"12.4(15)SW9a",
	"12.4(15)SW9",
	"12.4(15)SW8a",
	"12.4(15)SW8",
	"12.4(15)SW7",
	"12.4(15)SW6",
	"12.4(15)SW5",
	"12.4(15)SW4",
	"12.4(15)SW3",
	"12.4(15)SW2",
	"12.4(15)SW1",
	"12.4(15)SW",
	"12.4(11)SW3",
	"12.4(11)SW2",
	"12.4(11)SW1",
	"12.4(11)SW",
	"12.4(6)SW",
	"12.4(22)MX",
	"12.4(20)MRB2",
	"12.4(20)MRB1",
	"12.4(20)MRB",
	"12.4(20)MR2",
	"12.4(20)MR1",
	"12.4(20)MR",
	"12.4(19)MR3",
	"12.4(19)MR2",
	"12.4(19)MR1",
	"12.4(19)MR",
	"12.4(16)MR2",
	"12.4(16)MR1",
	"12.4(16)MR",
	"12.4(12)MR2",
	"12.4(12)MR1",
	"12.4(12)MR",
	"12.4(11)MR",
	"12.4(9)MR",
	"12.4(6)MR1",
	"12.4(6)MR",
	"12.4(4)MR1",
	"12.4(4)MR",
	"12.4(2)MR1",
	"12.4(2)MR",
	"12.4(22)MF",
	"12.4(24)MDC1",
	"12.4(24)MDC",
	"12.4(24)MDB16",
	"12.4(24)MDB15",
	"12.4(24)MDB14",
	"12.4(24)MDB13",
	"12.4(24)MDB12",
	"12.4(24)MDB11",
	"12.4(24)MDB10",
	"12.4(24)MDB9",
	"12.4(24)MDB8",
	"12.4(24)MDB7",
	"12.4(24)MDB6",
	"12.4(24)MDB5b",
	"12.4(24)MDB5a",
	"12.4(24)MDB5",
	"12.4(24)MDB4",
	"12.4(24)MDB3",
	"12.4(24)MDB2",
	"12.4(24)MDB1",
	"12.4(24)MDB",
	"12.4(24)MDA13",
	"12.4(24)MDA12",
	"12.4(24)MDA11",
	"12.4(24)MDA10",
	"12.4(24)MDA9",
	"12.4(24)MDA8",
	"12.4(24)MDA7",
	"12.4(24)MDA6",
	"12.4(24)MDA5",
	"12.4(24)MDA4",
	"12.4(24)MDA3",
	"12.4(24)MDA2",
	"12.4(24)MDA1",
	"12.4(22)MDA7",
	"12.4(22)MDA6",
	"12.4(22)MDA5",
	"12.4(22)MDA4",
	"12.4(22)MDA3",
	"12.4(22)MDA2",
	"12.4(22)MDA1",
	"12.4(22)MDA",
	"12.4(122)MD",
	"12.4(115)MD",
	"12.4(111)MD",
	"12.4(24)MD8",
	"12.4(24)MD7",
	"12.4(24)MD6",
	"12.4(24)MD5",
	"12.4(24)MD4",
	"12.4(24)MD3",
	"12.4(24)MD2",
	"12.4(24)MD1",
	"12.4(24)MD",
	"12.4(22)MD3",
	"12.4(22)MD2",
	"12.4(22)MD1",
	"12.4(22)MD",
	"12.4(15)MD6",
	"12.4(15)MD5",
	"12.4(15)MD4",
	"12.4(15)MD3",
	"12.4(15)MD2",
	"12.4(15)MD1",
	"12.4(15)MD",
	"12.4(11)MD11",
	"12.4(11)MD10",
	"12.4(11)MD9",
	"12.4(11)MD8",
	"12.4(11)MD7",
	"12.4(11)MD6",
	"12.4(11)MD5",
	"12.4(11)MD4",
	"12.4(11)MD3",
	"12.4(11)MD2",
	"12.4(11)MD1",
	"12.4(11)MD",
	"12.4(23c)JZ",
	"12.4(23c)JY",
	"12.4(23)JY",
	"12.4(21a)JY1",
	"12.4(21a)JY",
	"12.4(10b)JY",
	"12.4(103g)JX",
	"12.4(25e)JX",
	"12.4(21a)JX",
	"12.4(10b)JX",
	"12.4(3g)JX2",
	"12.4(3g)JX1",
	"12.4(3g)JX",
	"12.4(103g)JMC",
	"12.4(3g)JMC2",
	"12.4(3g)JMC1",
	"12.4(3g)JMC",
	"12.4(3g)JMB1",
	"12.4(3g)JMB",
	"12.4(3g)JMA2",
	"12.4(3g)JMA1",
	"12.4(3g)JMA",
	"12.4(103)JL",
	"12.4(3)JL3",
	"12.4(3)JL2",
	"12.4(3)JL1",
	"12.4(3)JL",
	"12.4(103)JK",
	"12.4(3)JK4",
	"12.4(3)JK3",
	"12.4(3)JK2",
	"12.4(3)JK1",
	"12.4(3)JK",
	"12.4(21a)JHC",
	"12.4(21a)JHA1",
	"12.4(21a)JHA",
	"12.4(10b)JDE",
	"12.4(10b)JDD1",
	"12.4(10b)JDD",
	"12.4(10b)JDC",
	"12.4(110b)JDA",
	"12.4(10b)JDA4",
	"12.4(10b)JDA3",
	"12.4(10b)JDA2",
	"12.4(10b)JDA1",
	"12.4(10b)JDA",
	"12.4(10b)JD",
	"12.4(25d)JB1",
	"12.4(25e)JAZ1",
	"12.4(25e)JAZ",
	"12.4(25e)JAX2",
	"12.4(25e)JAX1",
	"12.4(25e)JAX",
	"12.4(25d)JAX1",
	"12.4(25d)JAX",
	"12.4(25)JAX",
	"12.4(25e)JAP26",
	"12.4(25e)JAP12",
	"12.4(25e)JAP11",
	"12.4(25e)JAP10",
	"12.4(25e)JAP8",
	"12.4(25e)JAP7",
	"12.4(25e)JAP6",
	"12.4(25e)JAP5",
	"12.4(25e)JAP4",
	"12.4(25e)JAP2",
	"12.4(25e)JAP1n",
	"12.4(25e)JAP1m",
	"12.4(25e)JAP1",
	"12.4(25e)JAP",
	"12.4(25e)JAO5",
	"12.4(25e)JAO4",
	"12.4(25e)JAO3",
	"12.4(25e)JAO2",
	"12.4(25e)JAO1",
	"12.4(25e)JAO",
	"12.4(25e)JAN2",
	"12.4(25e)JAN1",
	"12.4(25e)JAM4",
	"12.4(25e)JAM3",
	"12.4(25e)JAM2",
	"12.4(25e)JAM1",
	"12.4(25e)JAM",
	"12.4(25e)JAL2",
	"12.4(25e)JAL1a",
	"12.4(25e)JAL1",
	"12.4(25e)JAL",
	"12.4(118a)JA",
	"12.4(116b)JA",
	"12.4(110b)JA",
	"12.4(103g)JA",
	"12.4(25e)JA1",
	"12.4(25e)JA",
	"12.4(25d)JA2",
	"12.4(25d)JA1",
	"12.4(25d)JA",
	"12.4(23c)JA10",
	"12.4(23c)JA9",
	"12.4(23c)JA7",
	"12.4(23c)JA5",
	"12.4(23c)JA3",
	"12.4(23c)JA2",
	"12.4(23c)JA1",
	"12.4(23c)JA",
	"12.4(21a)JA50",
	"12.4(21a)JA3",
	"12.4(21a)JA2",
	"12.4(21a)JA1",
	"12.4(21a)JA",
	"12.4(18a)JA3",
	"12.4(18a)JA2",
	"12.4(18a)JA1",
	"12.4(18a)JA",
	"12.4(16b)JA2",
	"12.4(16b)JA1",
	"12.4(16b)JA",
	"12.4(13d)JA1a",
	"12.4(13d)JA1",
	"12.4(13d)JA",
	"12.4(10b)JA5",
	"12.4(10b)JA4",
	"12.4(10b)JA3",
	"12.4(10b)JA2",
	"12.4(10b)JA1a",
	"12.4(10b)JA1",
	"12.4(10b)JA",
	"12.4(10a)JA",
	"12.4(3g)JA3",
	"12.4(3g)JA2",
	"12.4(3g)JA1",
	"12.4(3g)JA",
	"12.4(119)",
	"12.4(118)",
	"12.4(108)",
	"12.4(105)",
	"12.4(103)",
	"12.4(69)",
	"12.4(25g)",
	"12.4(25f)",
	"12.4(25e)",
	"12.4(25d)",
	"12.4(25c)",
	"12.4(25b)",
	"12.4(25a)",
	"12.4(25)",
	"12.4(23b)",
	"12.4(23a)",
	"12.4(23)",
	"12.4(21b)",
	"12.4(21a)",
	"12.4(21)",
	"12.4(19b)",
	"12.4(19a)",
	"12.4(19)",
	"12.4(18e)",
	"12.4(18c)",
	"12.4(18b)",
	"12.4(18a)",
	"12.4(18)",
	"12.4(17b)",
	"12.4(17a)",
	"12.4(17)",
	"12.4(16b)",
	"12.4(16a)",
	"12.4(16)",
	"12.4(14)",
	"12.4(13f)",
	"12.4(13e)",
	"12.4(13d)",
	"12.4(13c)",
	"12.4(13b)",
	"12.4(13a)",
	"12.4(13)",
	"12.4(12c)",
	"12.4(12b)",
	"12.4(12a)",
	"12.4(12)",
	"12.4(10c)",
	"12.4(10b)",
	"12.4(10)",
	"12.4(8d)",
	"12.4(8c)",
	"12.4(8b)",
	"12.4(8a)",
	"12.4(8)",
	"12.4(7h)",
	"12.4(7g)",
	"12.4(7f)",
	"12.4(7e)",
	"12.4(7d)",
	"12.4(7c)",
	"12.4(7b)",
	"12.4(7a)",
	"12.4(7)",
	"12.4(5c)",
	"12.4(5b)",
	"12.4(5a)",
	"12.4(5)",
	"12.4(3j)",
	"12.4(3i)",
	"12.4(3h)",
	"12.4(3g)",
	"12.4(3e)",
	"12.4(3c)",
	"12.4(3b)",
	"12.4(3a)",
	"12.4(3)",
	"12.4(1c)",
	"12.4(1b)",
	"12.4(1a)",
	"12.4(1)",
	"12.3(14)ZC",
	"12.3(8)ZA",
	"12.3(11)YZ3",
	"12.3(11)YZ2",
	"12.3(11)YZ1",
	"12.3(11)YZ",
	"12.3(14)YV",
	"12.3(14)YU1",
	"12.3(14)YU",
	"12.3(14)YT1",
	"12.3(14)YT",
	"12.3(11)YS3",
	"12.3(11)YS2",
	"12.3(11)YS1",
	"12.3(11)YS",
	"12.3(14)YQ8",
	"12.3(14)YQ7",
	"12.3(14)YQ6",
	"12.3(14)YQ5",
	"12.3(14)YQ4",
	"12.3(14)YQ3",
	"12.3(14)YQ2",
	"12.3(14)YQ1",
	"12.3(14)YQ",
	"12.3(114)YM",
	"12.3(14)YM13",
	"12.3(14)YM12",
	"12.3(14)YM11",
	"12.3(14)YM10",
	"12.3(14)YM9",
	"12.3(14)YM8",
	"12.3(14)YM7",
	"12.3(14)YM6",
	"12.3(14)YM5",
	"12.3(14)YM4",
	"12.3(14)YM3",
	"12.3(11)YK2",
	"12.3(11)YK1",
	"12.3(11)YJ",
	"12.3(8)YI3",
	"12.3(8)YI1",
	"12.3(8)YG6",
	"12.3(8)YG4",
	"12.3(8)YG2",
	"12.3(8)YG",
	"12.3(11)YF3",
	"12.3(11)YF1",
	"12.3(11)YF",
	"12.3(8)YD1",
	"12.3(8)YD",
	"12.3(8)YA1",
	"12.3(8)YA",
	"12.3(2)XZ2",
	"12.3(2)XZ1",
	"12.3(2)XZ",
	"12.3(8)XY7",
	"12.3(8)XY6",
	"12.3(8)XY5",
	"12.3(8)XY4",
	"12.3(8)XY3",
	"12.3(8)XY2",
	"12.3(8)XY1",
	"12.3(8)XY",
	"12.3(8)XX2f",
	"12.3(8)XX2d",
	"12.3(8)XX1",
	"12.3(8)XX",
	"12.3(8)XW3",
	"12.3(8)XW2",
	"12.3(8)XW1",
	"12.3(8)XW",
	"12.3(8)XU5",
	"12.3(8)XU4",
	"12.3(8)XU3",
	"12.3(8)XU2",
	"12.3(8)XU1",
	"12.3(8)XU",
	"12.3(7)XS2",
	"12.3(7)XS1",
	"12.3(7)XS",
	"12.3(7)XR8",
	"12.3(7)XR4",
	"12.3(7)XR3",
	"12.3(7)XR2",
	"12.3(7)XR",
	"12.3(4)XQ1",
	"12.3(4)XQ",
	"12.3(11)XL1",
	"12.3(11)XL",
	"12.3(4)XK4",
	"12.3(4)XK3",
	"12.3(4)XK2",
	"12.3(4)XK1",
	"12.3(4)XK",
	"12.3(7)XJ2",
	"12.3(7)XJ1",
	"12.3(7)XJ",
	"12.3(7)XI5",
	"12.3(7)XI4",
	"12.3(7)XI3",
	"12.3(7)XI2a",
	"12.3(7)XI2",
	"12.3(7)XI1c",
	"12.3(7)XI1b",
	"12.3(7)XI1",
	"12.3(4)XG5",
	"12.3(4)XG4",
	"12.3(4)XG3",
	"12.3(4)XG2",
	"12.3(4)XG1",
	"12.3(4)XG",
	"12.3(2)XF",
	"12.3(2)XE6",
	"12.3(2)XE5",
	"12.3(2)XE4",
	"12.3(2)XE3",
	"12.3(2)XE2",
	"12.3(2)XE1",
	"12.3(2)XE",
	"12.3(4)XD4",
	"12.3(4)XD3",
	"12.3(4)XD2",
	"12.3(4)XD1",
	"12.3(4)XD",
	"12.3(2)XC6",
	"12.3(2)XC5",
	"12.3(2)XC4",
	"12.3(2)XC3",
	"12.3(2)XC2",
	"12.3(2)XC1",
	"12.3(2)XC",
	"12.3(2)XB3",
	"12.3(2)XB2",
	"12.3(2)XB1",
	"12.3(2)XB",
	"12.3(2)XA8",
	"12.3(2)XA7",
	"12.3(2)XA6",
	"12.3(2)XA5",
	"12.3(2)XA4",
	"12.3(2)XA3",
	"12.3(2)XA2",
	"12.3(2)XA1",
	"12.3(2)XA",
	"12.3(8)VA",
	"12.3(4)TPC11c",
	"12.3(4)TPC11b",
	"12.3(4)TPC11a",
	"12.3(14)T9",
	"12.3(14)T8",
	"12.3(14)T7",
	"12.3(14)T6",
	"12.3(14)T5",
	"12.3(14)T3",
	"12.3(14)T2",
	"12.3(14)T1",
	"12.3(14)T",
	"12.3(11)T11",
	"12.3(11)T10",
	"12.3(11)T9",
	"12.3(11)T8",
	"12.3(11)T7",
	"12.3(11)T6",
	"12.3(11)T5",
	"12.3(11)T4",
	"12.3(11)T3",
	"12.3(11)T2",
	"12.3(11)T",
	"12.3(8)T11",
	"12.3(8)T10",
	"12.3(8)T9",
	"12.3(8)T8",
	"12.3(8)T7",
	"12.3(8)T6",
	"12.3(8)T5",
	"12.3(8)T4",
	"12.3(8)T3",
	"12.3(8)T1",
	"12.3(8)T",
	"12.3(7)T12",
	"12.3(7)T11",
	"12.3(7)T10",
	"12.3(7)T9",
	"12.3(7)T8",
	"12.3(7)T7",
	"12.3(7)T6",
	"12.3(7)T4",
	"12.3(7)T3",
	"12.3(7)T2",
	"12.3(7)T1",
	"12.3(7)T",
	"12.3(4)T13",
	"12.3(4)T11",
	"12.3(4)T10",
	"12.3(4)T9",
	"12.3(4)T8",
	"12.3(4)T7",
	"12.3(4)T6",
	"12.3(4)T4",
	"12.3(4)T3",
	"12.3(4)T2a",
	"12.3(4)T2",
	"12.3(4)T1",
	"12.3(4)T",
	"12.3(2)T9",
	"12.3(2)T8",
	"12.3(2)T7",
	"12.3(2)T6",
	"12.3(2)T5",
	"12.3(2)T4",
	"12.3(2)T3",
	"12.3(2)T2",
	"12.3(2)T1",
	"12.3(2)T",
	"12.3(3d)M0",
	"12.3(107)JX",
	"12.3(11)JX1",
	"12.3(11)JX",
	"12.3(7)JX13",
	"12.3(7)JX12",
	"12.3(7)JX11",
	"12.3(7)JX10",
	"12.3(7)JX9",
	"12.3(7)JX8",
	"12.3(7)JX7",
	"12.3(7)JX6",
	"12.3(7)JX5",
	"12.3(7)JX4",
	"12.3(7)JX3",
	"12.3(7)JX2",
	"12.3(7)JX1",
	"12.3(7)JX",
	"12.3(2)JL5",
	"12.3(2)JL4",
	"12.3(2)JL3",
	"12.3(2)JL2",
	"12.3(2)JL1",
	"12.3(2)JL",
	"12.3(8)JK2",
	"12.3(8)JK1",
	"12.3(8)JK",
	"12.3(2)JK4",
	"12.3(2)JK3",
	"12.3(2)JK2",
	"12.3(2)JK1",
	"12.3(2)JK",
	"12.3(8)JEE1",
	"12.3(8)JEE",
	"12.3(8)JED2",
	"12.3(8)JED1",
	"12.3(8)JED",
	"12.3(108)JEC",
	"12.3(8)JEC4",
	"12.3(8)JEC3",
	"12.3(8)JEC2",
	"12.3(8)JEC1",
	"12.3(8)JEC",
	"12.3(108)JEB",
	"12.3(8)JEB2",
	"12.3(8)JEB1",
	"12.3(8)JEB",
	"12.3(108)JEA",
	"12.3(8)JEA4",
	"12.3(8)JEA3",
	"12.3(8)JEA2",
	"12.3(8)JEA1",
	"12.3(8)JEA",
	"12.3(111)JA",
	"12.3(107)JA",
	"12.3(100)JA",
	"12.3(11)JA5",
	"12.3(11)JA4",
	"12.3(11)JA3",
	"12.3(11)JA2",
	"12.3(11)JA1",
	"12.3(11)JA",
	"12.3(8)JA3",
	"12.3(8)JA2",
	"12.3(8)JA1",
	"12.3(8)JA",
	"12.3(7)JA6",
	"12.3(7)JA5",
	"12.3(7)JA4",
	"12.3(7)JA3",
	"12.3(7)JA2",
	"12.3(7)JA1",
	"12.3(7)JA",
	"12.3(4)JA2",
	"12.3(4)JA1",
	"12.3(4)JA",
	"12.3(2)JA6",
	"12.3(2)JA5",
	"12.3(2)JA4",
	"12.3(2)JA3",
	"12.3(2)JA2",
	"12.3(2)JA1",
	"12.3(2)JA",
	"12.3(8)EU",
	"12.3(1a)BW",
	"12.3(123)BC",
	"12.3(23)BC10",
	"12.3(23)BC9",
	"12.3(23)BC8",
	"12.3(23)BC7",
	"12.3(23)BC6",
	"12.3(23)BC5",
	"12.3(23)BC4",
	"12.3(23)BC3",
	"12.3(23)BC2",
	"12.3(23)BC1",
	"12.3(23)BC",
	"12.3(21b)BC5",
	"12.3(21a)BC9",
	"12.3(21a)BC8",
	"12.3(21a)BC7",
	"12.3(21a)BC6",
	"12.3(21a)BC5",
	"12.3(21a)BC4",
	"12.3(21a)BC3",
	"12.3(21a)BC2",
	"12.3(21a)BC1",
	"12.3(21)BC",
	"12.3(17b)BC9",
	"12.3(17b)BC8",
	"12.3(17b)BC7",
	"12.3(17b)BC6",
	"12.3(17b)BC5",
	"12.3(17b)BC4",
	"12.3(17b)BC3",
	"12.3(17a)BC2",
	"12.3(17a)BC1",
	"12.3(17a)BC",
	"12.3(13a)BC6",
	"12.3(13a)BC5",
	"12.3(13a)BC4",
	"12.3(13a)BC3",
	"12.3(13a)BC2",
	"12.3(13a)BC1",
	"12.3(13a)BC",
	"12.3(9a)BC10",
	"12.3(9a)BC9",
	"12.3(9a)BC8",
	"12.3(9a)BC7",
	"12.3(9a)BC6",
	"12.3(9a)BC5",
	"12.3(9a)BC4",
	"12.3(9a)BC3",
	"12.3(9a)BC2",
	"12.3(9a)BC1",
	"12.3(9a)BC",
	"12.3(5a)B5",
	"12.3(5a)B4",
	"12.3(5a)B3",
	"12.3(5a)B2",
	"12.3(5a)B1",
	"12.3(5a)B",
	"12.3(3)B1",
	"12.3(3)B",
	"12.3(1a)B",
	"12.3(26)",
	"12.3(25)",
	"12.3(24a)",
	"12.3(24)",
	"12.3(23)",
	"12.3(22a)",
	"12.3(22)",
	"12.3(21b)",
	"12.3(21)",
	"12.3(20a)",
	"12.3(20)",
	"12.3(19a)",
	"12.3(19)",
	"12.3(18a)",
	"12.3(18)",
	"12.3(17c)",
	"12.3(17b)",
	"12.3(17a)",
	"12.3(17)",
	"12.3(16a)",
	"12.3(16)",
	"12.3(15b)",
	"12.3(15a)",
	"12.3(15)",
	"12.3(13c)",
	"12.3(13b)",
	"12.3(13a)",
	"12.3(13)",
	"12.3(12f)",
	"12.3(12e)",
	"12.3(12d)",
	"12.3(12c)",
	"12.3(12b)",
	"12.3(12a)",
	"12.3(12)",
	"12.3(10f)",
	"12.3(10e)",
	"12.3(10d)",
	"12.3(10c)",
	"12.3(10b)",
	"12.3(10a)",
	"12.3(10)",
	"12.3(9e)",
	"12.3(9d)",
	"12.3(9c)",
	"12.3(9b)",
	"12.3(9a)",
	"12.3(9)",
	"12.3(8r)",
	"12.3(6f)",
	"12.3(6e)",
	"12.3(6c)",
	"12.3(6b)",
	"12.3(6a)",
	"12.3(6)",
	"12.3(5f)",
	"12.3(5e)",
	"12.3(5d)",
	"12.3(5c)",
	"12.3(5b)",
	"12.3(5a)",
	"12.3(5)",
	"12.3(3i)",
	"12.3(3h)",
	"12.3(3g)",
	"12.3(3f)",
	"12.3(3e)",
	"12.3(3c)",
	"12.3(3b)",
	"12.3(3a)",
	"12.3(3)",
	"12.3(1a)",
	"12.3(1)",
}
